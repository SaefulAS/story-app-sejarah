if(importScripts("https://storage.googleapis.com/workbox-cdn/releases/6.5.4/workbox-sw.js"),workbox){workbox.setConfig({debug:!1});const e=new URL(self.location.href);"7878"!==e.port&&(console.warn("❌ SW not allowed on this port:",e.port),self.skipWaiting(),self.close()),workbox.routing.registerRoute((({request:e})=>"navigate"===e.mode),new workbox.strategies.NetworkFirst({cacheName:"dev-html-cache"})),workbox.routing.registerRoute((({request:e})=>["script","style"].includes(e.destination)),new workbox.strategies.StaleWhileRevalidate({cacheName:"dev-static-resources"})),workbox.routing.registerRoute((({request:e})=>"image"===e.destination),new workbox.strategies.CacheFirst({cacheName:"image-cache",plugins:[new workbox.expiration.ExpirationPlugin({maxEntries:50})]})),workbox.routing.registerRoute((({url:e})=>"https://story-api.dicoding.dev"===e.origin&&e.pathname.startsWith("/v1/stories")),new workbox.strategies.NetworkFirst({cacheName:"dicoding-story-api-cache",plugins:[new workbox.cacheableResponse.CacheableResponsePlugin({statuses:[0,200]}),new workbox.expiration.ExpirationPlugin({maxEntries:50,maxAgeSeconds:2592e3})]})),workbox.routing.registerRoute((({url:e})=>e.origin===self.location.origin&&e.pathname.startsWith("/stories")),new workbox.strategies.NetworkFirst({cacheName:"stories-api-cache",plugins:[new workbox.cacheableResponse.CacheableResponsePlugin({statuses:[0,200]}),new workbox.expiration.ExpirationPlugin({maxEntries:50,maxAgeSeconds:2592e3})]})),self.addEventListener("fetch",(e=>{"navigate"===e.request.mode&&e.respondWith(fetch(e.request).catch((()=>caches.match("/offline.html"))))})),self.addEventListener("push",(e=>{if(!e.data)return;const t=e.data.text();try{const o=JSON.parse(t);e.waitUntil(self.registration.showNotification(o.title||"",{...o.options,tag:"story-push",renotify:!1,requireInteraction:!1,data:{link:"/#home"}}))}catch(o){e.waitUntil(self.registration.showNotification("Notification",{body:t,data:{link:"/#home"}}))}})),self.addEventListener("notificationclick",(e=>{e.notification.close();const t=e.notification.data?.link||"/#home";e.waitUntil(clients.matchAll({type:"window",includeUncontrolled:!0}).then((e=>{for(const o of e)if(o.url.includes(t)&&"focus"in o)return o.focus();if(clients.openWindow)return clients.openWindow(t)})))})),self.addEventListener("message",(e=>{[self.location.origin].includes(e.origin)&&"SKIP_WAITING"===e.data?.type&&self.skipWaiting()}))}else console.error("❌ Workbox failed to load.");